{"ast":null,"code":"import _ from 'lodash';\n\nconst createShorthand = (name, type) => ({\n  name,\n  type: _.isUndefined(type) ? name : type\n});\n\nexport const SIDES = createShorthand('Sides', '');\nexport const CORNERS = createShorthand('Corners', '');\nexport const HORIZONTAL = createShorthand('Horizontal');\nexport const VERTICAL = createShorthand('Vertical');\nexport const LEFT = 'Left';\nexport const RIGHT = 'Right';\nexport const TOP = 'Top';\nexport const BOTTOM = 'Bottom';\nexport const TOP_RIGHT = 'TopRight';\nexport const BOTTOM_RIGHT = 'BottomRight';\nexport const TOP_LEFT = 'TopLeft';\nexport const BOTTOM_LEFT = 'BottomLeft'; // Shorthands normalizers creators.\n// This creators provide standard normalizer used in most cases.\n// When style property has any of this shorthands, use this creators\n// to create shorthand normalizer.\n\nclass ShorthandsNormalizerFactory {\n  constructor() {\n    this.createNormalizersMap = {\n      [SIDES.name]: this.createAllSidesNormalizer,\n      [CORNERS.name]: this.createAllCornersNormalizer,\n      [HORIZONTAL.name]: this.createHorizontalSidesNormalizer,\n      [VERTICAL.name]: this.createVerticalSidesNormalizer\n    };\n  }\n\n  createAllSidesNormalizer(prop, shorthand, suffix = '') {\n    return val => ({\n      [prop + LEFT + suffix]: val,\n      [prop + RIGHT + suffix]: val,\n      [prop + TOP + suffix]: val,\n      [prop + BOTTOM + suffix]: val\n    });\n  }\n\n  createAllCornersNormalizer(prop, shorthand, suffix = '') {\n    return val => ({\n      [prop + BOTTOM_LEFT + suffix]: val,\n      [prop + BOTTOM_RIGHT + suffix]: val,\n      [prop + TOP_LEFT + suffix]: val,\n      [prop + TOP_RIGHT + suffix]: val\n    });\n  }\n\n  createHorizontalSidesNormalizer(prop) {\n    return val => ({\n      [prop + LEFT]: val,\n      [prop + RIGHT]: val\n    });\n  }\n\n  createVerticalSidesNormalizer(prop) {\n    return val => ({\n      [prop + TOP]: val,\n      [prop + BOTTOM]: val\n    });\n  }\n\n  getNormalizerCreator(shorthand) {\n    return this.createNormalizersMap[shorthand.name];\n  }\n\n  createNormalizer(prop, shorthand, suffix) {\n    const normalizerCreator = this.getNormalizerCreator(shorthand);\n    return normalizerCreator(prop, shorthand, suffix);\n  }\n\n}\n\nexport default new ShorthandsNormalizerFactory();","map":null,"metadata":{},"sourceType":"module"}