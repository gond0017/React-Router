{"ast":null,"code":"import * as _ from 'lodash';\nexport const INCLUDE = '@@shoutem.theme/include';\n/**\n * Customizer function for lodash mergeWith which handle INCLUDE symbol.\n * Lodash merge/mergeWith functions doesn't merge symbols\n * and we use INCLUDE symbol to define which style we want to include.\n */\n// eslint-disable-next-line consistent-return\n\nfunction includeSymbolMergeHandler(objVal, srcVal) {\n  const newObjVal = objVal;\n  let include;\n\n  if (srcVal && srcVal[INCLUDE]) {\n    include = newObjVal && newObjVal[INCLUDE] ? [...newObjVal[INCLUDE], ...srcVal[INCLUDE]] : srcVal[INCLUDE];\n  } // if objVal doesn't exists create new from source\n\n\n  if (_.isUndefined(newObjVal) && _.isPlainObject(srcVal)) {\n    // Copy symbol fix.\n    // { ...srcVal } copies symbol wrong, it adds symbol value to the property defined just after it\n    // Problem example: { SYMBOL: ['Test'], someProp: 10 } => { someProp: ['Test'] }\n    // mergeWith prevents wrong copy because it doesn't iterate trough Symbols so it skips INCLUDE\n    // We do not INCLUDE symbol to be copied actually in this function\n    // because it is copied manually. This whole function is fixing Symbol problems.\n    const newObj = _.mergeWith({}, srcVal, (o, s) => s); // Assigning INCLUDE after object definition to avoid Object.assign when code transpiled.\n    // Object.assign in RN uses polyfill which doesn't copy Symbols that's why INCLUDE symbol\n    // must be set manually after spread.\n    // TODO(Braco) - once Object.assign polyfill is no longer used use commented code bellow\n    // Check if `customizer` is needed still at all after polyfill is removed!\n    // return { ...srcVal, [INCLUDE]: include }; // add new lines for each property\n\n\n    if (include) {\n      newObj[INCLUDE] = include;\n    }\n\n    return newObj;\n  } // otherwise let lodash default merge (return undefined)\n  // and add INCLUDE to objVal if any in srcVal\n\n\n  if (_.isPlainObject(newObjVal) && include) {\n    newObjVal[INCLUDE] = include;\n  }\n}\n/**\n * Recursively include required target styles from target and base root.\n *\n * @param target - styles object containing\n * @param base - additional style object from which target may include style\n */\n\n\nexport default function resolveIncludes(target, base = {}) {\n  /**\n   * Include process steps:\n   * 1. Iterate through target object, check if property is object and if it has [INCLUDE]\n   * 2.a. If property is object, repeat process for that object\n   * 2.b. If property is not object leave value as is\n   * 3. Include any [INCLUDE] (required style)\n   *  1. Repeat process for required style (check if it has any [INCLUDE])\n   */\n\n  /**\n   * Merges style from target and base.\n   * Target style overrides base.\n   * @param styleName - style name to include\n   */\n  function getStyle(styleName) {\n    const defaultStyle = {};\n    let style = defaultStyle;\n    const baseStyle = base[styleName];\n\n    if (baseStyle) {\n      if (baseStyle[INCLUDE]) {\n        throw Error(\"Base style cannot have includes, unexpected include in \".concat(styleName, \".\"));\n      }\n\n      style = { ...baseStyle\n      };\n    }\n\n    const targetStyle = target[styleName];\n\n    if (targetStyle) {\n      style = { ...style,\n        ...targetStyle\n      };\n    }\n\n    if (style === defaultStyle) {\n      console.warn(\"Including unexisting style: \".concat(styleName));\n    }\n\n    return style;\n  } // Includes all styles required by using the INCLUDE symbol\n  // on the styleNode object level, and recursively calls itself\n  // for all nested style objects. After calling this function, the\n  // styleNode object will be fully processed, i.e., all styles\n  // required by this object, and any of its children will be resolved.\n\n\n  function includeNodeStyles(styleNode, processingStyleNames) {\n    if (!_.isPlainObject(styleNode)) {\n      return styleNode;\n    } // Style names which current style node want to include\n\n\n    const styleNamesToInclude = styleNode[INCLUDE];\n    let stylesToInclude = {};\n\n    if (styleNamesToInclude) {\n      if (!_.isArray(styleNamesToInclude)) {\n        throw Error('Include should be array');\n      }\n\n      for (const styleName of styleNamesToInclude) {\n        if (processingStyleNames.has(styleName)) {\n          throw Error(\"Circular style include, including \".concat(styleName));\n        }\n\n        processingStyleNames.add(styleName);\n        stylesToInclude = _.mergeWith({}, stylesToInclude, includeNodeStyles(getStyle(styleName), processingStyleNames), includeSymbolMergeHandler);\n        processingStyleNames.delete(styleName);\n      }\n    }\n\n    const resultingStyle = _.mergeWith({}, stylesToInclude, styleNode, includeSymbolMergeHandler);\n\n    delete resultingStyle[INCLUDE];\n\n    for (const styleName of _.keys(resultingStyle)) {\n      resultingStyle[styleName] = includeNodeStyles(resultingStyle[styleName], processingStyleNames);\n    }\n\n    return resultingStyle;\n  } // A that holds all style names that are currently\n  // being processed. This is used to detect include\n  // cycles.\n\n\n  const processingStyleNames = new Set();\n  return includeNodeStyles(target, processingStyleNames);\n}","map":null,"metadata":{},"sourceType":"module"}